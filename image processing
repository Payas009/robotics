#!/usr/bin/env python3

# Import necessary libraries
import sys
import time
import numpy as np
import cv2
from cv_bridge import CvBridge
import rospy
import roslib
from sensor_msgs.msg import CompressedImage

class LaneDetector:
    def __init__(self):
        # Initialize the ROS node
        rospy.init_node("lane_detector_node")

        # Set up the CvBridge
        self.bridge = CvBridge()

        # Subscribe to the compressed image topic
        self.image_subscriber = rospy.Subscriber('/shravel/camera_node/image/compressed', CompressedImage, self.process_image, queue_size=1)

    def process_image(self, msg):
        rospy.loginfo("Processing image")

        # Convert the compressed image to an OpenCV image
        cv_image = self.bridge.compressed_imgmsg_to_cv2(msg, "bgr8")

        # Crop the image
        cropped_image = cv_image[200:400, 100:500]

        # Convert to HSV color space
        hsv_image = cv2.cvtColor(cropped_image, cv2.COLOR_BGR2HSV)

        # Define HSV ranges for white and yellow colors
        white_mask = cv2.inRange(hsv_image, np.array([0, 0, 200]), np.array([255, 50, 255]))
        yellow_mask = cv2.inRange(hsv_image, np.array([20, 100, 100]), np.array([40, 255, 255]))

        # Detect edges using Canny edge detector
        edges_white = cv2.Canny(white_mask, 50, 150)
        edges_yellow = cv2.Canny(yellow_mask, 50, 150)

        # Apply Hough Transform to detect lines
        white_lines = self.hough_transform(edges_white)
        yellow_lines = self.hough_transform(edges_yellow)

        # Draw the detected lines on the cropped image
        self.draw_detected_lines(cropped_image, white_lines)
        self.draw_detected_lines(cropped_image, yellow_lines)

        # Display the result
        cv2.imshow('Detected Lane Lines', cropped_image)
        cv2.waitKey(1)

    def hough_transform(self, edges):
        # Perform Hough Transform to find lines
        return cv2.HoughLinesP(edges, 1, np.pi/180, 100, minLineLength=50, maxLineGap=50)

    def draw_detected_lines(self, image, lines):
        if lines is not None:
            for line in lines:
                x1, y1, x2, y2 = line[0]
                cv2.line(image, (x1, y1), (x2, y2), (0, 255, 0), 2)

    def run(self):
        rospy.spin()

if __name__ == "__main__":
    try:
        detector = LaneDetector()
        detector.run()
    except rospy.ROSInterruptException:
        pass
 
